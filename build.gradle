plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.0'
    id 'io.spring.dependency-management' version '1.1.5'
    id "jacoco"
}

group = 'com.m3pro'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // 스프링 기본 설정을 위한 의존성
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // 스웨거 기본 설정을 위한 의존성
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

    // GIS 자료형을 위한 의존성
    implementation group: 'org.hibernate', name: 'hibernate-spatial', version: '6.4.2.Final'
    implementation group: 'org.n52.jackson', name: 'jackson-datatype-jts', version: '1.2.10'

    // JWT를 위한 의존성
    implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'

    // 클라우드 워치를 위한 의존성
    implementation 'ca.pjer:logback-awslogs-appender:1.6.0'

    // 프로메테우스를 위한 의존성
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    runtimeOnly("io.micrometer:micrometer-registry-prometheus")

    implementation "javax.xml.bind:jaxb-api:2.3.0"

    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    implementation 'org.bouncycastle:bcpkix-jdk15on:1.69'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.69'

    implementation 'org.redisson:redisson-spring-boot-starter:3.16.3'

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.mysql:mysql-connector-j'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs << "-parameters"
}


test {
    finalizedBy 'jacocoTestReport'
}

jacoco {
    toolVersion = '0.8.8'
    reportsDirectory = layout.buildDirectory.dir('jacocoReport')
}

jacocoTestReport {

    dependsOn test

    reports {
        xml.required = true
        csv.required = false
        html.required = true
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            '**/domain/**',
                            '**/config/**',
                            '**/enums/**',
                            '**/exception/**',
                            '**/jwt/*Filter*',
                            '**/oauth/*Client*',
                    ])
                })
        )
    }
    finalizedBy 'jacocoTestCoverageVerification'
}
